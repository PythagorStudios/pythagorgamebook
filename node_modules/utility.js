/**
 * Created by finnb on 8/11/16.
 */

var mysql = require('mysql');
var fs = require('fs');


//Constants
module.exports.pageTitle = "Game Books";


console.log("Reading MYSQL config...");
var connectionData = JSON.parse(fs.readFileSync('/home/finnb/nodejs-mysql.cfg'));
connectionData.database = "gamebooks";
console.log("Done.");

module.exports.query = function(string, callback) {
    var connection = mysql.createConnection(connectionData);

    connection.connect(function (err) {
        if (err) {
            throw "Could not connect to mysql: " + err;
            callback(null, null);
        }

        connection.query(string, function (err, rows, fields) {
            console.log("Queried mysql: " + string);
            connection.end();
            callback(rows, fields);
        });
    });
};

module.exports.initDB = function(callback)
{
    var util = this;
    this.query("CREATE TABLE IF NOT EXISTS Books (title VARCHAR(63) UNIQUE, id INT UNIQUE AUTO_INCREMENT, coverImageUrl VARCHAR(255) DEFAULT NULL, author VARCHAR(63), published INT DEFAULT 0, dateCreated TIMESTAMP DEFAULT CURRENT_TIMESTAMP, description VARCHAR(255), views INT DEFAULT 0);", function(rows) {
        if (rows == null) {
            console.log("Failed to create table Books.");
        }
        else {
            util.query("CREATE TABLE IF NOT EXISTS Pages (id INT UNIQUE AUTO_INCREMENT, path VARCHAR(255) UNIQUE, json VARCHAR(5000), dateCreated TIMESTAMP DEFAULT CURRENT_TIMESTAMP, views INT DEFAULT 0);", function(rows) {
                if (rows == null) {
                    console.log("Failed to create table Pages.");
                }
                else {
                    callback();
                }
            });
        }
    });
};

module.exports.getGameBookById = function(id, callback)
{
    this.query("SELECT * FROM Books WHERE id=" + sanInput(id) + ";", function(rows) {
        if (rows == null)
        {
            console.log("Failed to get gamebook with id " + id + ".");
        }
        else
        {
            callback(rows[0]);
        }
    });
};

module.exports.incrementGameBookViews = function(id, callback) {
    this. query("UPDATE Books SET views = views + 1 WHERE id=" + sanInput(id) + ";", function(rows) {
        if (rows == null) {
            console.log("Failed to increment views for gamebook with id " + id + ".");
        }
        else {
            callback();
        }
    });
};

module.exports.getPageId = function(path, callback)
{
    this.query("SELECT id FROM Pages WHERE path=" + sanInput(path) + ";", function(rows) {
        if (rows == null)
        {
            console.log("Failed to get page id with path " + path + ".");
        }
        else
        {
            callback(rows[0].id);
        }
    });
};

module.exports.incrementPageViews = function(id, callback) {
    this. query("UPDATE Pages SET views = views + 1 WHERE id=" + sanInput(id) + ";", function(rows) {
        if (rows == null) {
            console.log("Failed to increment views for gamebook with id " + id + ".");
        }
        else {
            callback();
        }
    });
};

module.exports.getGameBookListing = function(callback)
{
  this.query("SELECT Books.title, Books.id, Books.author, Books.description, Books.dateCreated, Books.views, COUNT(Pages.id) AS pageCount FROM Books LEFT JOIN Pages ON Pages.path LIKE CONCAT(Books.id, '%') GROUP BY Books.id;", function(rows) {
      if (rows == null)
      {
          console.log("Failed to get gamebook listing.");
      }
      else {
          callback(rows);
      }
  });
};

module.exports.getChildPages = function(parent, callback)
{
    this.query("SELECT * FROM Pages WHERE path LIKE '" + sanInput(parent) + "%';", function(rows) {
        if (rows == null)
        {
            console.log("Failed to get page listing.");
        }
        else {
            callback(rows);
        }
    });
};

module.exports.getPage = function(path, callback)
{
  this.query("SELECT * FROM Pages WHERE path='" + sanInput(path) + "';", function(rows) {
      if (rows == null)
      {
          console.log("Failed to get page with path " + path + ".");
      }
      else
      {
          callback(rows[0]);
      }
  });
};

module.exports.getChildPagesCount = function(parent, callback)
{
    this.getChildPages(parent, function(rows) {
        callback(rows.length);
    });
};

module.exports.createPage = function(path, json, callback)
{
    this.query("INSERT INTO Pages (path, json) VALUES ('" + sanInput(path) + "', '" + json + "');", function(rows) {
        if (rows == null) {
            console.log("Failed to create page with path " + path + ".");
        }
        else {
            callback();
        }
    });
};

module.exports.createGameBook = function(title, author, description, callback)
{
    this.query("INSERT INTO Books (title, author, description, published) VALUES ('" + sanInput(title) + "', '" + sanInput(author) + "', '" + sanInput(description) + "', 1);", function(rows) {
        if (rows == null) {
            console.log("Failed to create gamebook " + title + ".");
        }
        else {
            callback();
        }
    });
};

module.exports.isAnyNullOrEmpty = function(list)
{
    list.forEach(function(item) {
       if (item == null || item == "")
       {
           return true;
       }
    });
    return false;
};

var sanInput = function(input)
{
    return input.replace(';', '').replace('--', '').replace("'", "").replace('"', '');
};


